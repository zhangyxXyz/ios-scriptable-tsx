// Variables used by Scriptable.
// These must be at the very top of the file. Do not edit.
// icon-color: pink; icon-glyph: tv;

/*
 * author   :  yx.zhang
 * date     :  2021/10/20
 * desc     :  BÁ´ôÊ¶úÂçï
 * version  :  1.0.0
 * github   :  https://github.com/zhangyxXyz/ios-scriptable-tsx
 * changelog:
 */

if (typeof require === 'undefined') require = importModule
const { WidgetBase, Runing, GenrateView, h } = require('./zyx.Env')
const Utils = require('./Utils')

class Widget extends WidgetBase {
    constructor(arg) {
        super(arg)
        this.name = 'BÁ´ôÊ¶úÂçï'
        this.en = 'BilibiliMonitor'
        this.Run()
    }

    // ÁªÑ‰ª∂‰º†ÂÖ•ÂèÇÊï∞
    widgetParam = args.widgetParameter
    contentRowSpacing = 5

    httpData = null
    isRequestSuccess = false
    // Ê¶úÂçïÁ±ªÂûã
    ridTypeDic = { ÂÖ®Á´ô: 0, Âä®Áîª: 1, Èü≥‰πê: 3, Ê∏∏Êàè: 4, Â®±‰πê: 5, ÁßëÊäÄ: 36, È¨ºÁïú: 119, ËàûËπà: 129 }

    // ÁªÑ‰ª∂ÂΩìÂâçËÆæÁΩÆ
    currentSettings = {
        basicSettings: {
            ridType: { val: 'ÂÖ®Á´ô', type: this.settingValTypeString },
            urlJumpType: { val: 'Ë∑≥ËΩ¨Ëá≥app', type: this.settingValTypeString }
        },
        displaySettings: {
            mediaWidgetShowDataNum: { val: 6, type: this.settingValTypeInt },
            largeWidgetShowDataNum: { val: 15, type: this.settingValTypeInt },
            listDataColorShowType: { val: 'ÈöèÊú∫È¢úËâ≤', type: this.settingValTypeString },
            listDataUpdateTimeShowType: { val: 'ÊòæÁ§∫', type: this.settingValTypeString }
        }
    }

    init = async () => {
        try {
            await this.getData()
        } catch (e) {
            console.log(e)
        }
    }

    async getData() {
        this.isRequestSuccess = false
        try {
            let realRidId = this.widgetParam
                ? parseInt(this.widgetParam)
                : this.ridTypeDic[this.currentSettings.basicSettings.ridType.val] || 0
            let data = await this.$request.get(`https://app.bilibili.com/x/v2/rank/region?rid=${realRidId}`)
            this.httpData = data
            this.isRequestSuccess = true
            console.log(this.httpData)
        } catch (error) {
            console.log(error)
        }
    }

    Run() {
        if (config.runsInApp) {
            this.registerExtraSettingsCategory('basicSettings', 'Âü∫Á°ÄËÆæÁΩÆ')
            this.registerExtraSettingsCategoryItem(
                'basicSettings',
                'menu',
                'Ê¶úÂçïÁ±ªÂûã',
                '\nÁº∫ÁúÅÂÄº: ÂÖ®Á´ô',
                { ridType: 'ÂÖ®Á´ô' },
                { name: 'list.star', color: '#22B1EE' },
                ['ÂÖ®Á´ô', 'Âä®Áîª', 'Èü≥‰πê', 'Ê∏∏Êàè', 'Â®±‰πê', 'ÁßëÊäÄ', 'È¨ºÁïú', 'ËàûËπà']
            )
            this.registerExtraSettingsCategoryItem(
                'basicSettings',
                'menu',
                'Ë∑≥ËΩ¨ÊñπÂºè',
                'ÁÇπÂáªÊ¶úÂçïÊù°ÁõÆÈìæÊé•Ë∑≥ËΩ¨ÊñπÂºè\nÈÄâÊã© Ë∑≥ËΩ¨Ëá≥app Êó∂Ëã•Êú™ÂÆâË£ÖappÔºåÂàô‰ºöÊó†ÂìçÂ∫î\n\nÁº∫ÁúÅÂÄº: Ë∑≥ËΩ¨Ëá≥ÊµèËßàÂô®',
                { urlJumpType: 'Ë∑≥ËΩ¨Ëá≥app' },
                { name: 'link', color: '#D371E3' },
                ['Ë∑≥ËΩ¨Ëá≥ÊµèËßàÂô®', 'Ë∑≥ËΩ¨Ëá≥app']
            )
            this.registerExtraSettingsCategory('displaySettings', 'ÊòæÁ§∫ËÆæÁΩÆ')
            this.registerExtraSettingsCategoryItem(
                'displaySettings',
                'text',
                '‰∏≠ÁªÑ‰ª∂Êï∞ÊçÆÊù°Êï∞',
                '\nÁº∫ÁúÅÂÄºÔºö6',
                { mediaWidgetShowDataNum: '6' },
                { name: 'number.square', color: '#5BD078' }
            )
            this.registerExtraSettingsCategoryItem(
                'displaySettings',
                'text',
                'Â§ßÁªÑ‰ª∂Êï∞ÊçÆÊù°Êï∞',
                '\nÁº∫ÁúÅÂÄºÔºö15',
                { largeWidgetShowDataNum: '15' },
                { name: 'number.square', color: '#3478F6' }
            )
            this.registerExtraSettingsCategoryItem(
                'displaySettings',
                'menu',
                'Êï∞ÊçÆÊù°ÁõÆÈ¢úËâ≤',
                '\nÁº∫ÁúÅÂÄº: ÈöèÊú∫È¢úËâ≤',
                { listDataColorShowType: 'ÈöèÊú∫È¢úËâ≤' },
                'https://raw.githubusercontent.com/zhangyxXyz/IconSet/master/Scriptable/Settings/colorSet.png',
                ['ÁªÑ‰ª∂ÊñáÊú¨È¢úËâ≤', 'ÈöèÊú∫È¢úËâ≤']
            )
            this.registerExtraSettingsCategoryItem(
                'displaySettings',
                'menu',
                'Êï∞ÊçÆÊõ¥Êñ∞Êó∂Èó¥',
                '\nÁº∫ÁúÅÂÄº: ÊòæÁ§∫',
                { listDataUpdateTimeShowType: 'ÊòæÁ§∫' },
                { name: 'arrow.clockwise', color: '#D11D0C' },
                ['ÊòæÁ§∫', '‰∏çÊòæÁ§∫']
            )

            this.registerAction(
                'ÂèÇÊï∞ÈÖçÁΩÆ',
                async () => {
                    const table = new UITable()
                    table.showSeparators = true
                    await this.renderSettings(table)
                    await table.present()
                },
                'https://raw.githubusercontent.com/zhangyxXyz/IconSet/master/Scriptable/Settings/setting.png'
            )

            this.registerAction(
                'Âü∫Á°ÄËÆæÁΩÆ',
                this.setWidgetConfig,
                'https://raw.githubusercontent.com/zhangyxXyz/IconSet/master/Scriptable/Settings/preferences.png'
            )
        }
    }

    decideGoto(item) {
        switch (this.currentSettings.basicSettings.urlJumpType.val) {
            case 'Ë∑≥ËΩ¨Ëá≥ÊµèËßàÂô®':
                return `https://bilibili.com/${item.goto}${item.param}`
            case 'Ë∑≥ËΩ¨Ëá≥app':
                return item.uri
            default:
                return void 0
        }
    }

    async renderSettings(table) {
        var renderCustomHeader = function () {
            table.removeAllRows()
            let resetHeader = new UITableRow()
            let resetHeading = resetHeader.addText('ÈáçÁΩÆËÆæÁΩÆ')
            resetHeading.titleFont = Font.mediumSystemFont(17)
            resetHeading.centerAligned()
            table.addRow(resetHeader)
            let resetRow = new UITableRow()
            let resetRowText = resetRow.addText('ÈáçÁΩÆËÆæÁΩÆÂèÇÊï∞', 'ËÆæÁΩÆÂèÇÊï∞ÁªëÂÆöËÑöÊú¨Êñá‰ª∂ÂêçÔºåËØ∑ÂãøÈöèÊÑèÊõ¥ÊîπËÑöÊú¨Êñá‰ª∂Âêç')
            resetRowText.titleFont = Font.systemFont(16)
            resetRowText.subtitleFont = Font.systemFont(12)
            resetRowText.subtitleColor = new Color('999999')
            resetRow.dismissOnSelect = false
            resetRow.onSelect = async () => {
                const options = ['ÂèñÊ∂à', 'ÈáçÁΩÆ']
                const message = 'Êú¨ËèúÂçïÈáåÁöÑÊâÄÊúâËÆæÁΩÆÂèÇÊï∞Â∞Ü‰ºöÈáçÁΩÆ‰∏∫ÈªòËÆ§ÂÄºÔºåÈáçÁΩÆÂêéËØ∑ÈáçÊñ∞ÊâìÂºÄËÆæÁΩÆËèúÂçï'
                const index = await this.generateAlert(message, options)
                if (index === 0) return
                for (const category of Object.keys(this.currentSettings)) {
                    if (category === this.noneCategoryName) {
                        continue
                    }
                    delete this.settings[category]
                }
                this.saveSettings()
                await this.renderSettings(table)
            }
            table.addRow(resetRow)
        }
        this.renderExtraSettings(table, renderCustomHeader)
    }

    renderCommon = async w => {
        if (this.httpData && (this.httpData.code == 0 || this.httpData.code == '0')) {
            let items = this.httpData.data.splice(
                0,
                Math.min(
                    this.widgetFamily == 'medium'
                        ? this.currentSettings.displaySettings.mediaWidgetShowDataNum.val
                        : this.currentSettings.displaySettings.largeWidgetShowDataNum.val,
                    this.httpData.data.length
                )
            )
            items.map(item => {
                console.log(`‚Ä¢ ${item.title}`)
            })

            GenrateView.setListWidget(w)
            return /* @__PURE__ */ h(
                'wbox',
                {
                    spacing: this.contentRowSpacing
                },
                /* @__PURE__ */ h('wspacer', {
                    length: this.contentRowSpacing
                }),
                /* @__PURE__ */ h(
                    'wtext',
                    {
                        textColor: this.widgetColor,
                        font: new Font('SF Mono', 15),
                        opacity: 0.7
                    },
                    `üíó BÁ´ôÊ¶úÂçï`
                ),
                items.map(item => {
                    return /* @__PURE__ */ h(
                        'wtext',
                        {
                            textColor:
                                this.currentSettings.displaySettings.listDataColorShowType.val === 'ÈöèÊú∫È¢úËâ≤'
                                    ? new Color(Utils.randomColor16())
                                    : this.widgetColor,
                            font: new Font('SF Mono', 12),
                            maxLine: 1,
                            href: this.decideGoto(item)
                        },
                        `‚Ä¢ ${item.title}`
                    )
                }),
                this.currentSettings.displaySettings.listDataUpdateTimeShowType.val === 'ÊòæÁ§∫' &&
                    /* @__PURE__ */ h(
                        'wstack',
                        {
                            verticalAlign: 'center',
                            padding: [0, 0, 5, 0]
                        },
                        /* @__PURE__ */ h('wspacer', null),
                        /* @__PURE__ */ h('wimage', {
                            src: 'arrow.clockwise',
                            width: 10,
                            height: 10,
                            filter: this.widgetColor,
                            opacity: 0.5
                        }),
                        /* @__PURE__ */ h('wspacer', {
                            length: 5
                        }),
                        /* @__PURE__ */ h(
                            'wtext',
                            {
                                textColor: this.isRequestSuccess ? this.widgetColor : Color.red(),
                                font: new Font('SF Mono', 10),
                                textAlign: 'right',
                                opacity: 0.5
                            },
                            Utils.time('HH:mm:ss')
                        )
                    )
            )
        }
    }

    async render() {
        const widget = new ListWidget()
        await this.getWidgetBackgroundImage(widget)
        if (this.widgetFamily == 'small') {
            await Utils.renderUnsupport(widget)
        } else {
            await this.init()
            await this.renderCommon(widget)
        }
        switch (this.widgetFamily) {
            case 'small':
                widget.presentSmall()
                break
            case 'medium':
                widget.presentMedium()
                break
            case 'large':
                widget.presentLarge()
                break
            default:
                widget.presentMedium()
                break
        }
    }
}

await Runing(Widget, args.widgetParameter, false)
